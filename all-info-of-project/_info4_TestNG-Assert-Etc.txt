================================
 Page Object Model (POM) TestNG
--------------------------------

POM is the design pattern we use to code our test automation, which creates Object Repository for web UI elements.
Each logical Web-Page (or UI-component) will get its own Page class. 
Page Factory is the way we write great code for locating & dealing with the elements, which makes life much easy !
The class provided by Selenium WebDriver, supports use of @FindBy & initElements method (for locate & initialize).

TestNG:
TestNG is a powerful testing framework, an enhanced version of JUnit which was in use for a long time before.
NG stands for 'Next Generation'. Annotations help us organize the tests easily. Flexible test configuration !
This testing framework (open source libraries) make it more powerful and easier to use, such as:
Annotations.
Run your tests in arbitrarily big thread pools with various policies available (all methods - each in own thread).
Test that your code is multithread safe.
Flexible test configuration.
Support for data-driven testing (with @DataProvider).
Support for parameters.
Powerful execution model (no more TestSuite).
Supported by a variety of tools and plug-ins (Eclipse, IDEA, Maven, etc...).
Embeds BeanShell for further flexibility.
Default JDK functions for runtime and logging (no dependencies).
Dependent methods for application server testing.
TestNG is designed to cover all categories of tests:  unit, functional, end-to-end, integration, etc...

Advantages:
- Makes code maintainable -
- Makes code reusable -
- Makes code readable (and more easy to write) -

--> NOTE: because we want to propagate PageFactory up to all our Pages, best thing is to use 'BasePage' for this !
------------------------------------------------------------------------------------------------------------------

Order of action we would do:
To work with it, you need to download & install (selection: https://testng.org/testng-eclipse-update-site) ->
Following step by step -> installing TestNG in Eclipse: https://www.guru99.com/install-testng-in-eclipse.html
	1) Open Eclipse Help > Eclipse Marketplace...  ->  https://marketplace.eclipse.org/content/testng-eclipse
	2) Search - Find "TestNG" >
	3) TestNG for Eclipse ----> Install (relevant components) + Accept the license agreement...
	4) Wait for installation... Ignore security warning if occurs = Install anyway!
	5) Needs RESTART of eclipse!
Then: Restart, verify if TestNG for Eclipse was indeed successfully installed  (Click Window > Show View > Other).
Also: Window > Preferences > TestNG...
More: https://www.guru99.com/all-about-testng-and-selenium.html
Now, instead of running tests from main, you can run them from TestNG using @Test
Add @Test above the method you want to test (remove the main) public void tc_01_Login(){
and you will be asked to add Library of TestNG to Project + also to do: import org.testng.annotations.Test;
When Running - choose "Run as TestNG" !
___
 - https://testng.org/doc/index.html
 - https://testng.org/doc/documentation-main.html
 - https://www.javatpoint.com/testng-tutorial
 - https://www.guru99.com/all-about-testng-and-selenium.html
 - https://www.browserstack.com/guide/prioritizing-tests-in-testng-with-selenium
 - https://www.tutorialspoint.com/what-is-the-order-of-execution-of-tests-in-testng

===========
 ASSERTING
-----------
Test Component can use the Assert method capabilities -> 
Assertions in TestNG are a way to verify that the expected result and the actual result matched or not.
If we could decide the outcome on different small methods using assertions in our test case -->
We can determine whether our test failed or passed overall. ---> see: 
~ assertEquals: This is used to compare expected and actual values in the selenium.
  The assertion passes with no exception whenever the expected and actual values are same.
  But, if actual and expected values are not same - assert fails with exception & test is marked as failed!
  What is assertTrue in TestNG?
~ assertTrue: This method asserts if the condition is true or not. If not, then the exception error is thrown.
  Assert. assertTrue(condition, message) : Similar to the previous method with an addition of message,
  which is shown on the console when the assertion fails along with the exception.
~ assertThat: the only assertion in JUnit 4, that has a reverse order of the parameters compared to other asserts.
  In this case, the assertion has an optional failure message, the actual value, and a Matcher object.
___
 - https://www.selenium.dev/documentation/test_practices/encouraged/page_object_models/#assertions-in-page-objects
 - https://www.toolsqa.com/testng/testng-asserts/
 - https://www.tutorialspoint.com/testng/testng_assertion.htm
 - https://www.seleniumeasy.com/testng-tutorials/assertions-in-testng
______________
Example below:
How to?
We will be working with ...

@Test – Must be at least one in a class
@Test (Priority = 0) – Default priority is alphabetic order
@Test (enabled=false)
@Test(dependsOnMethods={“login"})

https://testng.org/doc/documentation-main.html -> for example:
@BeforeSuite
@AfterSuite
@BeforeTest
@AfterTest
@BeforeGroups
@AfterGroups
@BeforeClass
@AfterClass
@BeforeMethod
@AfterMethod

==================
 RUNNING via File
------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
	<test thread-count="5" name="Test">
		<!-- if you wish to use params in your tests, you can use it this way -->
		<!-- <parameter name=""baseUrl" value="https://www.saucedemo.com/" /> -->
		<classes>
			<class name="saucedemo.testcases.S01_LoginTests" />
			<class name="saucedemo.testcases.S02_ProductsInventoryTests" />
			<class name="saucedemo.testcases.S08_MenuTests" />
		</classes>
	</test> <!-- Test -->
</suite> <!-- Suite -->


==================
 TestNG Listeners
------------------
https://www.lambdatest.com/blog/testng-listeners-in-selenium-webdriver-with-examples/
TestNG Listeners In Selenium WebDriver With Examples:
There are different interfaces provided by Java that allows you to modify TestNG behavior.
These interfaces are further known as TestNG Listeners in Selenium WebDriver.
TestNG Listeners also allows you to customize the tests logs or report according to your project requirements.
TestNG Listeners in Selenium WebDriver are modules that listens to certain events and keep track of test execution -
While performing some action at every stage of test execution.

This will assist with adding screenshot, & attach it to Allure:
https://selenium.teachable.com/courses/562412/lectures/10321389

-> See more in Allure...

Example of Listeners:
ITestListener
This is the most adopted TestNG listener in Selenium WebDriver.
Providing you with an easy to implement interface through a normal Java class,
where the class overrides every method declared inside the ITestListener.
By using this TestNG listener in Selenium WebDriver,
you can change the default behavior of your test by adding different events to the methods.

Following are some methods provided by this interface:
------------------------------------------------------
onStart:
	This method is invoked before any test method gets executed.
	This can be used to get the directory from where the tests are running.

onFinish:
	This method is invoked after all tests methods gets executed.
	This can be used to store information of all the tests that were run.

onTestStart:
	This method is invoked before any tests method is invoked.
	This can be used to indicate that the particular test method has been started.

onTestSkipped:
	This method is invoked when each test method is skipped.
	This can be used to indicate that the particular test method has been skipped.

onTestSuccess:
	This method is invoked when any test method gets succeeded.
	This can be used to indicate that the particular test method has successfully finished its execution.

onTestFailure:
	This method is invoked when any test method gets failed.
	This can be used to indicate that the particular test method has been failed.
	You can create an event of taking a screenshot which would show where the test has been failed.

onTestFailedButWithinSuccessPercentage:
	This method is invoked each time the test method fails but is within the success percentage mentioned.
	To implement this method, we use two attributes as a parameter of TestNG annotations
_____
MORE:
IAnnotationTransformer
IInvokedMethodListener
ISuiteListener
IReporter
IConfigurable
IExecutionListener
IHookable
IMethodInterceptor
IConfigurationListener

___________
--  END  --